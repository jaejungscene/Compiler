State 9 conflicts: 2 shift/reduce
State 10 conflicts: 2 shift/reduce


Grammar

    0 $accept: expr $end

    1 expr: expr '+' expr
    2     | expr '*' expr
    3     | '(' expr ')'
    4     | NUM


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3
')' (41) 3
'*' (42) 2
'+' (43) 1
error (256)
NUM (258) 4


Nonterminals, with rules where they appear

$accept (8)
    on left: 0
expr (9)
    on left: 1 2 3 4, on right: 0 1 2 3


State 0

    0 $accept: . expr $end

    NUM  shift, and go to state 1
    '('  shift, and go to state 2

    expr  go to state 3


State 1

    4 expr: NUM .

    $default  reduce using rule 4 (expr)


State 2

    3 expr: '(' . expr ')'

    NUM  shift, and go to state 1
    '('  shift, and go to state 2

    expr  go to state 4


State 3

    0 $accept: expr . $end
    1 expr: expr . '+' expr
    2     | expr . '*' expr

    $end  shift, and go to state 5
    '+'   shift, and go to state 6
    '*'   shift, and go to state 7


State 4

    1 expr: expr . '+' expr
    2     | expr . '*' expr
    3     | '(' expr . ')'

    '+'  shift, and go to state 6
    '*'  shift, and go to state 7
    ')'  shift, and go to state 8


State 5

    0 $accept: expr $end .

    $default  accept


State 6

    1 expr: expr '+' . expr

    NUM  shift, and go to state 1
    '('  shift, and go to state 2

    expr  go to state 9


State 7

    2 expr: expr '*' . expr

    NUM  shift, and go to state 1
    '('  shift, and go to state 2

    expr  go to state 10


State 8

    3 expr: '(' expr ')' .

    $default  reduce using rule 3 (expr)


State 9

    1 expr: expr . '+' expr
    1     | expr '+' expr .
    2     | expr . '*' expr

    '+'  shift, and go to state 6
    '*'  shift, and go to state 7

    '+'       [reduce using rule 1 (expr)]
    '*'       [reduce using rule 1 (expr)]
    $default  reduce using rule 1 (expr)


State 10

    1 expr: expr . '+' expr
    2     | expr . '*' expr
    2     | expr '*' expr .

    '+'  shift, and go to state 6
    '*'  shift, and go to state 7

    '+'       [reduce using rule 2 (expr)]
    '*'       [reduce using rule 2 (expr)]
    $default  reduce using rule 2 (expr)
